/* 
 * FiberEffectImp.mac: Muscle fiber effect equation builder
 * 2010 Geoyeob Kim
 * 
 * One muscle fiber connects two rigid bodies.
 * 
 */

load("MyMathFunc.mac");
load("PrintClike.mac");

/* Print calculation time for each command */
showtime: true;

/*
 * Input variables
 */
/* Related to the origin body */
p_org : [px_org, py_org, pz_org]$ /* Position */
pd_org : [pdx_org, pdy_org, pdz_org]$ /* Velocity */
q_org : [qw_org, qx_org, qy_org, qz_org]$ /* Orientation */
qd_org : [qdw_org, qdx_org, qdy_org, qdz_org]$ /* Orientation rate of change */
fibb_org : [ fibbx_org, fibby_org, fibbz_org ]$
Iinv_org : matrix([1/Ixx_org,0,0],[0,1/Iyy_org,0],[0,0,1/Izz_org])$
/* Related to the insertion body */
p_ins : [px_ins, py_ins, pz_ins]$ /* Position */
pd_ins : [pdx_ins, pdy_ins, pdz_ins]$ /* Velocity */
q_ins : [qw_ins, qx_ins, qy_ins, qz_ins]$ /* Orientation */
qd_ins : [qdw_ins, qdx_ins, qdy_ins, qdz_ins]$ /* Orientation rate of change */
fibb_ins : [ fibbx_ins, fibby_ins, fibbz_ins ]$
Iinv_ins : matrix([1/Ixx_ins,0,0],[0,1/Iyy_ins,0],[0,0,1/Izz_ins])$

/*
 * Intermediate and convenience variables
 */
qbar_org : [qw_org, -qx_org, -qy_org, -qz_org]$ /* Conjugate quaternion */
omega_org : rest(2*quat_mult(qbar_org, qd_org), 1)$
fibbW_org : p_org + rest(quat_mult(q_org, quat_mult(append([0], fibb_org), qbar_org)), 1)$
fibbdW_org : pd_org + rest(quat_mult(q_org, quat_mult(append([0], cross(omega_org, fibb_org)), qbar_org)), 1)$

qbar_ins : [qw_ins, -qx_ins, -qy_ins, -qz_ins]$ /* Conjugate quaternion */
omega_ins : rest(2*quat_mult(qbar_ins, qd_ins), 1)$
fibbW_ins : p_ins + rest(quat_mult(q_ins, quat_mult(append([0], fibb_ins), qbar_ins)), 1)$
fibbdW_ins : pd_ins + rest(quat_mult(q_ins, quat_mult(append([0], cross(omega_ins, fibb_ins)), qbar_ins)), 1)$

/*
 * 'CapQ_i (Q_i)' computation
 *
 * A fiber 'i' connects the body '*_org' and '*_ins'
 * as an origin and an insertion, respectively.
 *  Origin and insertion places are fibb_org and fibb_ins
 * in respective body coordinates.
 */

/*
 * Tension
 * (ORIGIN)------xd POSITIVE DIRECTION-------->(INSERTION)
 */
fibDiffW : fibbW_ins - fibbW_org$
fiblen : sqrt(fibDiffW . fibDiffW)$
/* fiblen TEST
length(fiblen);
fiblen;
at(fiblen, [px_org = 1,   py_org = 0, pz_org = 3, qw_org = 1, qx_org = 0, qy_org = 0, qz_org = 0, fibbx_org = 0, fibby_org = 0, fibbz_org = 0,
 px_ins = 0.5, py_ins = 0, pz_ins = 3, qw_ins = 1, qx_ins = 0, qy_ins = 0, qz_ins = 0, fibbx_ins = 0, fibby_ins = 0, fibbz_ins = 0 ]);
*/
fibDirW : fibDiffW / fiblen$ /* Normalized fiber direction */
deltax : fiblen - xrest$
/* Relative velocity projected to the normalized fiber direction */
xd : fibDirW . (fibbdW_ins - fibbdW_org)$
Td : KSE/b*(KPE*deltax + b*xd - (1+KPE/KSE)*T + A)$

Td_optimized : optimize(Td)$ /* To be written */


/*
 * Calculation of dTddy_org and dTddy_ins =
 * 
 *    .
 * d  T
 * -------
 * d y
 *    org
 * 
 * A 1x14 row vector.
 * 
 *    .
 * d  T
 * -------
 * d y
 *    ins
 * 
 * A 1x14 row vector.
 * 
 * Make these two to a 2x14 matrix called 'dTddy_orgins'.
 * 
 */
y_org : append(p_org, q_org, pd_org, qd_org)$
y_ins : append(p_ins, q_ins, pd_ins, qd_ins)$
dTddy_org : makelist(concat("dTddy_org",i),i,1,length(y_org))$
dTddy_ins : makelist(concat("dTddy_ins",i),i,1,length(y_ins))$
for j:1 thru length(y_org) do (
	/*ldisplay(y_org[j]),*/
	dTddy_org[j] : diff(Td, y_org[j]),
	dTddy_ins[j] : diff(Td, y_ins[j])
	/*ldisplay(dTend_idy_org[j])*/
)$
dTddy_orgins : matrix(dTddy_org, dTddy_ins)$
display("Optimizing dTddy_orgins...");
dTddy_orgins_optimized : optimize(dTddy_orgins)$ /* To be written */
display("Optimized.");

/*
 * Calculation of yd_Q_{org/ins} =
 * 
 * . {org/ins}
 * y
 *   Q
 * 
 * A scalar variable 'orgOrIns' indicates
 * whether it is yd_Q_org (if 0) or yd_Q_ins (if 1).
 */
direction : (-2*orgOrIns+1)$
q_xxx : (1-orgOrIns)*q_org + orgOrIns*q_ins$
qbar_xxx : (1-orgOrIns)*qbar_org + orgOrIns*qbar_ins$
fibb_xxx : (1-orgOrIns)*fibb_org + orgOrIns*fibb_ins$
Iinv_xxx : (1-orgOrIns)*Iinv_org + orgOrIns*Iinv_ins$
m_xxx : (1-orgOrIns)*m_org + orgOrIns*m_ins$

fibbFW : direction*T*fibDirW$
fibbF : rest(quat_mult(qbar_xxx, quat_mult(append([0], fibbFW), q_xxx)),1)$
torque : cross(fibb_xxx, fibbF)$
omegabardot : Iinv_xxx . (0+torque)$
yd_Q_xxx : append([0,0,0], [0,0,0,0], (fibbFW)/m_xxx, 0.5*quat_mult(q_xxx, [0, omegabardot[1][1], omegabardot[2][1], omegabardot[3][1]]) )$



yd_Q_org : at(yd_Q_xxx, [orgOrIns=0])$
yd_Q_ins : at(yd_Q_xxx, [orgOrIns=1])$
yd_Q_orgins : matrix(yd_Q_org, yd_Q_ins)$
display("Optimizing yd_Q_orgins...");
yd_Q_orgins_optimized : optimize(yd_Q_orgins)$
display("Optimized.");


diff(yd_Q_orgins, A);
quit();

/*
 * Calculation of dTddT =
 * 
 *   .
 * d T
 * ---
 * d T
 */
dTddT_optimized : optimize(ratsimp(diff(Td, T)))$

/*
 * Calculation of dyd_Q_{org/ins}dT =
 * 
 *   . {org/ins}
 * d y
 *     Q
 * --------
 * d T
 */
dyd_Q_orgdT : diff(at(yd_Q_xxx, [orgOrIns=0]), T)$
dyd_Q_insdT : diff(at(yd_Q_xxx, [orgOrIns=1]), T)$
dyd_Q_orginsdT : matrix(dyd_Q_orgdT, dyd_Q_insdT)$
display("Optimizing dyd_Q_orginsdT...");
dyd_Q_orginsdT_optimized : optimize(dyd_Q_orginsdT)$
display("Optimized.");

/*
 * Calculation of dyd_Q_{org/ins}dy_org and dyd_Q_{org/ins}dy_ins =
 * 
 *    . {org/ins}
 *  d y
 *      Q
 * ---------
 *  d y
 *     org
 * 
 * A 14 x 14 matrix.
 * 
 *    . {org/ins}
 *  d y
 *      Q
 * ---------
 *  d y
 *     ins
 * 
 * A 14 x 14 matrix.
 * 
 * Concatenate two matrices to make 28 x 14 matrix 'dyd_Q_xxxdy_orgins'.
 * 
 */

dyd_Q_orgdy_org : jacobian(at(yd_Q_xxx, [orgOrIns=0]), y_org)$
dyd_Q_orgdy_ins : jacobian(at(yd_Q_xxx, [orgOrIns=0]), y_ins)$
dyd_Q_insdy_org : jacobian(at(yd_Q_xxx, [orgOrIns=1]), y_org)$
dyd_Q_insdy_ins : jacobian(at(yd_Q_xxx, [orgOrIns=1]), y_ins)$

dyd_Q_orginsdy_orgins : dyd_Q_orgdy_org$
for j:1 thru length(dyd_Q_orgdy_ins) do (
	dyd_Q_orginsdy_orgins : addrow(dyd_Q_orginsdy_orgins, dyd_Q_orgdy_ins[j])
)$
for j:1 thru length(dyd_Q_orgdy_ins) do (
	dyd_Q_orginsdy_orgins : addrow(dyd_Q_orginsdy_orgins, dyd_Q_insdy_org[j])
)$
for j:1 thru length(dyd_Q_orgdy_ins) do (
	dyd_Q_orginsdy_orgins : addrow(dyd_Q_orginsdy_orgins, dyd_Q_insdy_ins[j])
)$
display("Optimizing dyd_Q_orginsdy_orgins...");
dyd_Q_orginsdy_orgins_optimized : optimize(dyd_Q_orginsdy_orgins)$
display("Optimized.");


/*
 * Writing phase
 */
OpenFile("FiberEffectImp.py");
WriteDirectToFile("from numpy import *~%");
WriteDirectToFile("from math import pow, sin, cos~%");
WriteDirectToFile("from scipy import sparse~%");
WriteDirectToFile("~%");
WriteDirectToFile("def FiberEffectImp_1(p_org, q_org, pd_org, qd_org, m_org, Idiag_org, fibb_org,~%");
WriteDirectToFile("                     p_ins, q_ins, pd_ins, qd_ins, m_ins, Idiag_ins, fibb_ins,~%");
WriteDirectToFile("                     KSE, KPE, b, xrest, T, A):~%");
WriteDirectToFile("~%");
WriteDirectToFile("    px_org, py_org, pz_org = p_org~%");
WriteDirectToFile("    qw_org, qx_org, qy_org, qz_org = q_org~%");
WriteDirectToFile("    pdx_org, pdy_org, pdz_org = pd_org~%");
WriteDirectToFile("    qdw_org, qdx_org, qdy_org, qdz_org = qd_org~%");
WriteDirectToFile("    Ixx_org, Iyy_org, Izz_org = Idiag_org~%");
WriteDirectToFile("    fibbx_org, fibby_org, fibbz_org = fibb_org~%");
WriteDirectToFile("~%");
WriteDirectToFile("    px_ins, py_ins, pz_ins = p_ins~%");
WriteDirectToFile("    qw_ins, qx_ins, qy_ins, qz_ins = q_ins~%");
WriteDirectToFile("    pdx_ins, pdy_ins, pdz_ins = pd_ins~%");
WriteDirectToFile("    qdw_ins, qdx_ins, qdy_ins, qdz_ins = qd_ins~%");
WriteDirectToFile("    Ixx_ins, Iyy_ins, Izz_ins = Idiag_ins~%");
WriteDirectToFile("    fibbx_ins, fibby_ins, fibbz_ins = fibb_ins~%");
WriteDirectToFile("~%");
WriteDirectToFile("    dTddy_orgins = zeros((2,14))~%");
WriteDirectToFile("~%");

WriteBlockToClike("Td", Td_optimized, [1,1]);
WriteBlockToClike("dTddT", dTddT_optimized, [1,1]);
WriteBlockToClike("dTddy_orgins", dTddy_orgins_optimized, [2,14]);

WriteDirectToFile("~%");
WriteDirectToFile("    return Td, dTddy_orgins, dTddT~%");
WriteDirectToFile("~%");
WriteDirectToFile("~%");
WriteDirectToFile("~%");



WriteDirectToFile("def FiberEffectImp_2(orgOrIns,~%");
WriteDirectToFile("                     p_org, q_org, pd_org, qd_org, m_org, Idiag_org, fibb_org,~%");
WriteDirectToFile("                     p_ins, q_ins, pd_ins, qd_ins, m_ins, Idiag_ins, fibb_ins,~%");
WriteDirectToFile("                     KSE, KPE, b, xrest, T, A):~%");
WriteDirectToFile("~%");
WriteDirectToFile("    px_org, py_org, pz_org = p_org~%");
WriteDirectToFile("    qw_org, qx_org, qy_org, qz_org = q_org~%");
WriteDirectToFile("    pdx_org, pdy_org, pdz_org = pd_org~%");
WriteDirectToFile("    qdw_org, qdx_org, qdy_org, qdz_org = qd_org~%");
WriteDirectToFile("    Ixx_org, Iyy_org, Izz_org = Idiag_org~%");
WriteDirectToFile("    fibbx_org, fibby_org, fibbz_org = fibb_org~%");
WriteDirectToFile("~%");
WriteDirectToFile("    px_ins, py_ins, pz_ins = p_ins~%");
WriteDirectToFile("    qw_ins, qx_ins, qy_ins, qz_ins = q_ins~%");
WriteDirectToFile("    pdx_ins, pdy_ins, pdz_ins = pd_ins~%");
WriteDirectToFile("    qdw_ins, qdx_ins, qdy_ins, qdz_ins = qd_ins~%");
WriteDirectToFile("    Ixx_ins, Iyy_ins, Izz_ins = Idiag_ins~%");
WriteDirectToFile("    fibbx_ins, fibby_ins, fibbz_ins = fibb_ins~%");
WriteDirectToFile("~%");
WriteDirectToFile("    yd_Q_orgins = zeros((2,14))~%");
WriteDirectToFile("    dyd_Q_orginsdy_orgins = sparse.lil_matrix((56, 14))~%");
WriteDirectToFile("    dyd_Q_orginsdT = zeros((2,14))~%");
WriteDirectToFile("~%");

WriteBlockToClike("yd_Q_orgins", yd_Q_orgins_optimized, [2,14])$
WriteBlockToClike("dyd_Q_orginsdy_orgins", dyd_Q_orginsdy_orgins_optimized, [56,14]);
WriteBlockToClike("dyd_Q_orginsdT", dyd_Q_orginsdT_optimized, [2,14]);

WriteDirectToFile("~%");
WriteDirectToFile("    return yd_Q_orgins, dyd_Q_orginsdy_orgins, dyd_Q_orginsdT~%");
