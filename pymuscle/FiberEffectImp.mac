/* 
 * FiberEffectImp.mac: Muscle fiber effect equation builder
 * 2010 Geoyeob Kim
 * 
 * One muscle fiber connects two rigid bodies.
 * 
 */

load("MyMathFunc.mac");
load("PrintClike.mac");

/* Print calculation time for each command */
showtime: true;

/*
 * Input variables
 */
/* Related to the origin body */
p_org : [px_org, py_org, pz_org]$ /* Position */
pd_org : [vx_org, vy_org, vz_org]$ /* Velocity */
q_org : [qw_org, qx_org, qy_org, qz_org]$ /* Orientation */
qd_org : [qdw_org, qdx_org, qdy_org, qdz_org]$ /* Orientation rate of change */
fibb_org : [ fibbx_org, fibby_org, fibbz_org ]$
Iinv_org : matrix([1/Ixx_org,0,0],[0,1/Iyy_org,0],[0,0,1/Izz_org])$
/* Related to the insertion body */
p_ins : [px_ins, py_ins, pz_ins]$ /* Position */
pd_ins : [vx_ins, vy_ins, vz_ins]$ /* Velocity */
q_ins : [qw_ins, qx_ins, qy_ins, qz_ins]$ /* Orientation */
qd_ins : [qdw_ins, qdx_ins, qdy_ins, qdz_ins]$ /* Orientation rate of change */
fibb_ins : [ fibbx_ins, fibby_ins, fibbz_ins ]$
Iinv_ins : matrix([1/Ixx_ins,0,0],[0,1/Iyy_ins,0],[0,0,1/Izz_ins])$

/*
 * Intermediate and convenience variables
 */
qbar_org : [qw_org, -qx_org, -qy_org, -qz_org]$ /* Conjugate quaternion */
omega_org : rest(2*quat_mult(qbar_org, qd_org), 1)$
fibbW_org : p_org + rest(quat_mult(q_org, quat_mult(append([0], fibb_org), qbar_org)), 1)$
fibbdW_org : pd_org + rest(quat_mult(q_org, quat_mult(append([0], cross(omega_org, fibb_org)), qbar_org)), 1)$

qbar_ins : [qw_ins, -qx_ins, -qy_ins, -qz_ins]$ /* Conjugate quaternion */
omega_ins : rest(2*quat_mult(qbar_ins, qd_ins), 1)$
fibbW_ins : p_ins + rest(quat_mult(q_ins, quat_mult(append([0], fibb_ins), qbar_ins)), 1)$
fibbdW_ins : pd_ins + rest(quat_mult(q_ins, quat_mult(append([0], cross(omega_ins, fibb_ins)), qbar_ins)), 1)$

/*
 * 'CapQ_i (Q_i)' computation
 *
 * A fiber 'i' connects the body '*_org' and '*_ins'
 * as an origin and an insertion, respectively.
 *  Origin and insertion places are fibb_org and fibb_ins
 * in respective body coordinates.
 */

/*
 * Tension
 * (ORIGIN)------xd POSITIVE DIRECTION-------->(INSERTION)
 */
fibDiffW : fibbW_ins - fibbW_org$
fiblen : sqrt(fibDiffW . fibDiffW)$
/* fiblen TEST
length(fiblen);
fiblen;
at(fiblen, [px_org = 1,   py_org = 0, pz_org = 3, qw_org = 1, qx_org = 0, qy_org = 0, qz_org = 0, fibbx_org = 0, fibby_org = 0, fibbz_org = 0,
 px_ins = 0.5, py_ins = 0, pz_ins = 3, qw_ins = 1, qx_ins = 0, qy_ins = 0, qz_ins = 0, fibbx_ins = 0, fibby_ins = 0, fibbz_ins = 0 ]);
*/
fibDirW : fibDiffW / fiblen$ /* Normalized fiber direction */
deltax : fiblen - xrest$
/* Relative velocity projected to the normalized fiber direction */
xd : fibDirW . (fibbdW_ins - fibbdW_org)$
Td : KSE/b*(KPE*deltax + b*xd - (1+KPE/KSE)*T + A_i)$

Td_optimized : optimize(Td)$ /* To be written */


/*
 * Calculation of dTddy_org =
 * 
 *    .
 * d  T
 * -------
 * d y
 *    ins
 */
y_org : append(p_org, q_org, pd_org, qd_org)$
dTddy_org : makelist(concat("dTddy_org",i),i,1,length(y_org))$
for j:1 thru length(y_org) do (
	/*ldisplay(y_org[j]),*/
	dTddy_org[j] : diff(Td, y_org[j])
	/*ldisplay(dTend_idy_org[j])*/
)$
length(dTddy_org);
display("Optimizing dTddy_org...");
dTddy_org_optimized : optimize(dTddy_org)$ /* To be written */
display("Optimized.");

/*
 * Calculation of dTddy_ins =
 * 
 *    .
 * d  T
 * -------
 * d y
 *    ins
 */
y_ins : append(p_ins, q_ins, pd_ins, qd_ins)$
dTddy_ins : makelist(concat("dTddy_ins",i),i,1,length(y_ins))$
for j:1 thru length(y_ins) do (
	/*ldisplay(y_ins[j]),*/
	dTddy_ins[j] : diff(Td, y_ins[j])
	/*ldisplay(dTend_idy_ins[j])*/
)$
length(dTddy_ins);
display("Optimizing dTddy_ins...");
dTddy_ins_optimized : optimize(dTddy_ins)$
display("Optimized.");


/*
 * Calculation of yd_Q_org =
 * 
 * . org
 * y
 *   Q
 */
fibbFW : T*fibDirW$
fibbF : rest(quat_mult(qbar_org, quat_mult(append([0], fibbFW), q_org)),1)$
torque : cross(fibb_org, fibbF)$
omegabardot : Iinv_org . (0+torque)$
yd_Q_org : append([0,0,0], [0,0,0,0], (fibbFW)/m_org, 0.5*quat_mult(q_org, [0, omegabardot[1][1], omegabardot[2][1], omegabardot[3][1]]) )$
length(yd_Q_org);
display("Optimizing yd_Q_org...");
yd_Q_org_optimized : optimize(yd_Q_org)$
display("Optimized.");

/*
 * Calculation of yd_Q_ins =
 * 
 * . org
 * y
 *   Q
 */
/* Note that the tension force direction is reversed */
fibbFW : -1*T*fibDirW$
fibbF : rest(quat_mult(qbar_ins, quat_mult(append([0], fibbFW), q_ins)),1)$
torque : cross(fibb_ins, fibbF)$
omegabardot : Iinv_ins . (0+torque)$
yd_Q_ins : append([0,0,0], [0,0,0,0], (fibbFW)/m_ins, 0.5*quat_mult(q_ins, [0, omegabardot[1][1], omegabardot[2][1], omegabardot[3][1]]) )$
length(yd_Q_ins);
display("Optimizing yd_Q_ins...");
yd_Q_ins_optimized : optimize(yd_Q_ins)$
display("Optimized.");



/*
 * Calculation of dTddT =
 * 
 *   .
 * d T
 * ---
 * d T
 */
dTddT_optimized : optimize(ratsimp(diff(Td, T)))$

/*
 * Calculation of dyd_Q_{org/ins}dT =
 * 
 *   . {org/ins}
 * d y
 *     Q
 * --------
 * d T
 */
dyd_Q_orgdT_optimized : optimize(diff(yd_Q_org, T))$
dyd_Q_insdT_optimized : optimize(diff(yd_Q_ins, T))$

/*
 * Calculation of dyd_Q_orgdy_org =
 * 
 *    . org
 *  d y
 *      Q
 * ---------
 *  d y
 *     org
 */
/*
dyd_Q_orgdy_org : jacobian(yd_Q_org, y_org)$
display("Optimizing dyd_Q_orgdy_org...");
dyd_Q_orgdy_org_optimized : optimize(dyd_Q_orgdy_org)$
display("Optimized.");
*/


/*
 * Writing phase
 */
OpenFile("FiberEffectImp.py");
/* Writing Yd_Q =
 * 
 * .
 * Y
 *  Q
 */
WriteBlockToClike("yd_Q_org", yd_Q_org_optimized, [14,1])$
WriteBlockToClike("yd_Q_ins", yd_Q_ins_optimized, [14,1])$
WriteBlockToClike("Td", Td_optimized, [1,1]);

/*WriteBlockToClike("dyd_Q_orgdy_org", dyd_Q_orgdy_org_optimized, [14,14]);*/

WriteBlockToClike("dTddy_org", dTddy_org_optimized, [1,14]);
WriteBlockToClike("dTddy_ins", dTddy_ins_optimized, [1,14]);

WriteBlockToClike("dyd_Q_orgdT", dyd_Q_orgdT_optimized, [14,1]);
WriteBlockToClike("dyd_Q_insdT", dyd_Q_insdT_optimized, [14,1]);

WriteBlockToClike("dTddT", dTddT_optimized, [1,1]);
