load(vect)$
load(f90)$

quat_mult(q1, q2) := 
  block( [a1: q1[1], b1: q1[2], c1: q1[3], d1:q1[4],
          a2: q2[1], b2: q2[2], c2: q2[3], d2:q2[4] ],
         [ a1*a2 - b1*b2 - c1*c2 - d1*d2,
           a1*b2 + b1*a2 + c1*d2 - d1*c2,
           a1*c2 - b1*d2 + c1*a2 + d1*b2,
           a1*d2 + b1*c2 - c1*b2 + d1*a2 ] )$

cross(a,b) := [ a[2]*b[3]-a[3]*b[2], a[3]*b[1]-a[1]*b[3], a[1]*b[2]-a[2]*b[1] ]$

p : [px, py, pz]$  /* Position */
q : [qw, qx, qy, qz]$ /*  Orientation */
qbar : [qw, -qx, -qy, -qz]$ /* Conjugate quaternion */
v : [vx, vy, vz]$ /* Velocity */
qd : [qdw, qdx, qdy, qdz]$ /* Orientation rate of change */
a : [ax, ay, az]$ /* Acceleration */
qdd : [qddw, qddx, qddy, qddz]$ /* Orientation acceleration */
I : matrix([Ixx, 0,0],[0,Iyy,0], [0,0,Izz])$ /* 3x3 inertia tensor */
Iinv : matrix([1/Ixx, 0,0],[0,1/Iyy,0], [0,0,1/Izz])$ /* Inverse of the inertia tensor */
F : [Fx, Fy, Fz]$ /* External resultant force in global coordinates */
T : [Tx, Ty, Tz]$ /* External resultant torque in body coordinates */

/*
'r_i' computation
 i-th rigid body motion only with inertial and external forces
 r_i = [v_i qd_i atil_i qddtil_i]
*/

/* qbarqd, omegadot: intermediate variables for calculating qdd */
qbarqd : quat_mult(qbar, qd)$
qbarqd24 : rest(qbarqd, 1)$
Iqbarqd24 : transpose(I.qbarqd24)$
/* omegatildot is a 3x1 'matrix' which uses index [row][col] to select one element */
omegatildot : Iinv.( T+0 - 4*cross(qbarqd24, Iqbarqd24[1]) )$

r_i : append( v, qd, (F+0)/m, quat_mult(qd, qbarqd) + 0.5*quat_mult(q, [0, omegatildot[1][1], omegatildot[2][1], omegatildot[3][1]]) )$

Y : append(p, q, v, qd)$

r_i$

optimprefix:_x;
r_i_optimized : optimize(r_i)$
load("PrintClike.mac");
WriteBlockToClike("r_i", r_i_optimized);


dr_idY : optimize(jacobian(r_i, Y));
WriteBlockToClike("dr_idY", dr_idY);
quit();

/*
%% 'CapQ_i (Q_i)' computation
%
% A fiber 'i' connects the body 'ki' and 'ji' as origin and insertion,
% respectively. Origin and insertion place is fibb_ki and fibb_ji
% in respective body coordinates.
%
*/

p_ki : [px_ki, py_ki, pz_ki]$ /* Position */
q_ki : [qw_ki, qx_ki, qy_ki, qz_ki]$ /* Orientation */
qbar_ki : [qw_ki, -qx_ki, -qy_ki, -qz_ki]$ /* Conjugate quaternion */
v_ki : [vx_ki, vy_ki, vz_ki]$ /* Velocity */
qd_ki : [qdw_ki, qdx_ki, qdy_ki, qdz_ki]$ /* Orientation rate of change */
fibb_ki : [ fibbx_ki, fibby_ki, fibbz_ki ]$
Iinv_ki : matrix([1/Ixx_ki,0,0],[0,1/Iyy_ki,0],[0,0,1/Izz_ki])$

p_ji : [px_ji, py_ji, pz_ji]$ /* Position */
q_ji : [qw_ji, qx_ji, qy_ji, qz_ji]$ /* Orientation */
qbar_ji : [qw_ji, -qx_ji, -qy_ji, -qz_ji]$ /* Conjugate quaternion */
v_ji : [vx_ji, vy_ji, vz_ji]$ /* Velocity */
qd_ji : [qdw_ji, qdx_ji, qdy_ji, qdz_ji]$ /* Orientation rate of change */
fibb_ji : [ fibbx_ji, fibby_ji, fibbz_ji ]$
Iinv_ji : matrix([1/Ixx_ji,0,0],[0,1/Iyy_ji,0],[0,0,1/Izz_ji])$

omega_ki : rest(2*quat_mult(qbar_ki, qd_ki), 1)$
fibbW_ki : rest(quat_mult(q_ki, quat_mult(append([0], fibb_ki), qbar_ki)), 1)$
fibbdW_ki : v_ki + rest(quat_mult(q_ki, quat_mult(append([0], cross(omega_ki, fibb_ki)), qbar_ki)), 1)$

omega_ji : rest(2*quat_mult(qbar_ji, qd_ji), 1)$
fibbW_ji : rest(quat_mult(q_ji, quat_mult(append([0], fibb_ji), qbar_ji)), 1)$
fibbdW_ji : v_ji + rest(quat_mult(q_ji, quat_mult(append([0], cross(omega_ji, fibb_ji)), qbar_ji)), 1)$


/*
Tension
(ORIGIN)------xd POSITIVE DIRECTION-------->(INSERTION)
*/
fibDiffW : fibbW_ji - fibbW_ki$
fiblen : sqrt(fibDiffW . fibDiffW)$
fibDirW : fibDiffW / fiblen$
deltax : fiblen - xrest$
xd : fibDirW . (fibbdW_ji - fibbdW_ki)$
Tend_i : KSE/b*(KPE*deltax + b*xd - (1+KPE/KSE)*Ten_i + A_i)$

optimize(Tend_i)$

diff(Tend_i, px_ki)$
diff(Tend_i, py_ki)$
diff(Tend_i, pz_ki)$
diff(Tend_i, qw_ki)$
diff(Tend_i, qx_ki)$
diff(Tend_i, qy_ki)$
diff(Tend_i, qz_ki)$
diff(Tend_i, vx_ki)$
diff(Tend_i, vy_ki)$
diff(Tend_i, vz_ki)$
diff(Tend_i, qdw_ki)$
diff(Tend_i, qdx_ki)$
diff(Tend_i, qdy_ki)$
diff(Tend_i, qdz_ki)$
diff(Tend_i, Ten_i)$ /* ratsimp() can be used */

quit();

fibbFW : Ten_i*fibDirW$
fibbF : rest(quat_mult(qbar_ki, quat_mult(append([0], fibbFW), q_ki)),1)$
torque : cross(fibb_ki, fibbF)$
omegabardot : Iinv_ki.(0+torque)$

s_ki : append([ 0,0,0,  0,0,0,0 ],  (fibbFW)/m_ki, 0.5*quat_mult(q_ki, [0, omegabardot[1][1], omegabardot[2][1], omegabardot[3][1]]) )$
length(s_ki);

diff(s_ki, px_ki);
diff(s_ki, py_ki)$
diff(s_ki, pz_ki)$
diff(s_ki, qw_ki)$
diff(s_ki, qx_ki)$
diff(s_ki, qy_ki)$
diff(s_ki, qz_ki)$
diff(s_ki, vx_ki)$
diff(s_ki, vy_ki)$
diff(s_ki, vz_ki)$
diff(s_ki, qdw_ki)$
diff(s_ki, qdx_ki)$
diff(s_ki, qdy_ki)$
diff(s_ki, qdz_ki)$
diff(s_ki, Ten_i)$

/*



% q_i affects origin body (q^k_i)
q_i_org = Compute__q_i(q, m, Iinv, fibb, T_i*fibDirW);
% q_i affects insertion body (q^j_i)
q_i_ins = Compute__q_i(q, m, Iinv, fibb, -T_i*fibDirW);


*/
