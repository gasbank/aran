/* 
 * OneRbImp.mac: One rigid body implicit integration equation builder
 * 2010 Geoyeob Kim
 * 
 */

load("MyMathFunc.mac");
load("PrintClike.mac");

/* Print calculation time for each command */
showtime: true;

p : [px, py, pz]$  /* Position */
q : [qw, qx, qy, qz]$ /*  Orientation */
pd : [pdx, pdy, pdz]$ /* Velocity */
qd : [qdw, qdx, qdy, qdz]$ /* Orientation rate of change */
pdd : [pddx, pddy, pddz]$ /* Acceleration */
qdd : [qddw, qddx, qddy, qddz]$ /* Orientation acceleration */

qbar : [qw, -qx, -qy, -qz]$ /* Conjugate quaternion (for convenience) */
I : matrix([Ixx, 0,0],[0,Iyy,0], [0,0,Izz])$ /* 3x3 inertia tensor */
/* Inverse of the inertia tensor */
Iinv : matrix([1/Ixx, 0,0],[0,1/Iyy,0], [0,0,1/Izz])$
Fr : [Frx, Fry, Frz]$ /* External resultant force in 'global' coordinates */
Tr : [Trx, Try, Trz]$ /* External resultant torque in 'body' coordinates */

Y : append(p, q, pd, qd)$ /* State vector */

/*
 * 'r_i' computation
 * i-th rigid body motion only with inertial and external forces
 * r_i = [v_i qd_i atil_i qddtil_i]
 * 
 */
/* qbarqd, omegadot: intermediate variables for calculating qdd */
qbarqd : quat_mult(qbar, qd)$
qbarqd24 : rest(qbarqd, 1)$
Iqbarqd24 : transpose(I . qbarqd24)$
/* 
 * omegatildot is a 3x1 'matrix'
 * which uses index [row][col] to select one element
 * 
 */
omegatildot : Iinv.( Tr+0 - 4*cross(qbarqd24, Iqbarqd24[1]) )$

yd_R : append( pd, qd, (Fr+0)/m, quat_mult(qd, qbarqd) + 0.5*quat_mult(q, [0, omegatildot[1][1], omegatildot[2][1], omegatildot[3][1]]) )$

optimprefix:_x;
yd_R_optimized : optimize(yd_R)$
dyd_RdY_optimized : optimize(jacobian(yd_R, Y));

/*
 * Writing phase
 */
OpenFile("OneRbImp.py");
WriteDirectToFile("from numpy import *~%");
WriteDirectToFile("from math import pow, sin, cos~%");
WriteDirectToFile("from scipy import sparse~%");
WriteDirectToFile("def OneRbImp(p, q, pd, qd, m, Idiag, Fr, Tr):~%");
WriteDirectToFile("    px, py, pz = p~%");
WriteDirectToFile("    qw, qx, qy, qz = q~%");
WriteDirectToFile("    pdx, pdy, pdz = pd~%");
WriteDirectToFile("    qdw, qdx, qdy, qdz = qd~%");
WriteDirectToFile("    Ixx, Iyy, Izz = Idiag~%");
WriteDirectToFile("    Frx, Fry, Frz = Fr~%");
WriteDirectToFile("    Trx, Try, Trz = Tr~%");
WriteDirectToFile("~%");
WriteDirectToFile("    yd_R = zeros((14))~%");
WriteDirectToFile("    dyd_RdY = sparse.lil_matrix((14, 14))~%");

WriteBlockToClike("yd_R", yd_R_optimized, [14,1]);
WriteBlockToClike("dyd_RdY", dyd_RdY_optimized, [14,14]);

WriteDirectToFile("    return yd_R, dyd_RdY~%");
