/* PrintClike.mac
 * 2010 Geoyeob Kim
 */

out: openw("vVec.py");
printf(out, "/* Autogenerated file */~%");
printf(out, "/* Geoyeob Kim */~%");

printClike(v,vName, matDim) := block(
	if matrixp(v) then block (
		/*matDim : printMatDim(v),*/
		for r:1 thru matDim[1] do (
			pred : symbolp(v[r]),
			if pred then (
				for c:1 thru matDim[2] do (
					printf(out, "~a[~3d,~3d] = ~a[~d]~%", vName, r-1, c-1, string(v[r]), c-1)
				)
			)
			else (
				for c:1 thru matDim[2] do (
					vrcClike: subst(pow, "^", v[r][c]),
					vrcStr: string(vrcClike),
					if notequal(vrcStr, "0") then printf(out, "~a[~3d,~3d] = ~a~%", vName, r-1, c-1, vrcStr)
				)
			)
		),
		0
	)
	elseif listp(v) then block ( 
		vLen:length(v),
		for i:1 thru vLen do (
			viClike: subst(pow,"^", v[i]),
			viStr: string(viClike),
			if notequal(viStr, "0") then printf(out, "~a[~3d] = ~a~%", vName, i-1, viStr)
		),
		"this is list."
	)
	else (
		/* Hope this is a scalar... */
		vClike : subst(pow,"^",v),
		printf(out, "~a = ~a~%", vName, string(vClike))
	)
)$

printMatDim(m) := if matrixp(m) then [length(m),length(m[1])]$

optimprefix:_x;
v1:[x+y/z, y^5, y/z];
v2:[x+y, -y/z, x+y+y/z];

opted : optimize(append(v1, v2))$

ev(opted, [x=1,y=2,z=3]);


WriteBlockToClike(vName, blk, matDim) := block(
	printf(out, "################################################~%"),
	printf(out, "#      Variable: ~a~%", vName),
	printf(out, "################################################~%"),
	intermNo : length(first(blk)),
	/* Intermediate variables printing */
	for i:1 thru length(blk)-2 do (
		  expression : first(rest(blk,i)),
		  clike : subst(pow,"^", second(expression)   ),
		  printf(out, "~a = ~a~%", first(expression), string(clike))
	),
	printClike(last(blk), vName, matDim)
)$

WriteBlockTest(blk) := block(
   itermNo : length(first(blk)),
   for i:1 thru length(blk)-2 do (
        expression : first(rest(blk,i)),
        printf(out, "~a = ~a~%", first(expression), string(second(expression)))
   ),
   matrixp(last(blk)),
   [ last(blk)[1], length(last(blk)[1]) ]
   /*printMatDim(last(blk))*/
)$


/* Test Cases */
/*
WriteBlockToClike("opted", opted)$

opted2 : optimize(transpose(matrix(v1)) . matrix(v2));
WriteBlockToClike("opted2", opted2)$

*/

