# Autogenerated file
# 2010 Geoyeob Kim
# As a part of the thesis implementation
from numpy import *
from math import pow, sin, cos
from scipy import sparse

def dRdv(v1, v2, v3):
    th = sqrt(v1**2 + v2**2 + v3**2)
    dRdv1_s = array(zeros((3,3)))
    dRdv2_s = array(zeros((3,3)))
    dRdv3_s = array(zeros((3,3)))
    ################################################
    #      Variable: dRdv1_s
    ################################################
    _x1 = pow(th,-1)
    _x2 = 0.5*th
    _x3 = cos(_x2)
    _x4 = sin(_x2)
    _x5 = -1.0*_x1*_x3*_x4*v1
    _x6 = pow(th,-2)
    _x7 = pow(_x4,2)
    _x8 = pow(th,-3)
    _x9 = pow(v1,3)
    _x10 = pow(th,-4)
    _x11 = pow(v2,2)
    _x12 = -1.0*_x8*_x3*_x4*v1*_x11
    _x13 = 2*_x10*_x7*v1*_x11
    _x14 = pow(v3,2)
    _x15 = -1.0*_x8*_x3*_x4*v1*_x14
    _x16 = 2*_x10*_x7*v1*_x14
    _x17 = 2*_x6*_x7*v2
    _x18 = pow(v1,2)
    _x19 = 2.0*_x8*_x3*_x4*_x18*v2
    _x20 = -4*_x10*_x7*_x18*v2
    _x21 = pow(_x3,2)
    _x22 = 2*_x6*_x7*v3
    _x23 = 2.0*_x8*_x3*_x4*_x18*v3
    _x24 = -4*_x10*_x7*_x18*v3
    _x25 = -2*_x6*_x7*v1
    _x26 = -1.0*_x8*_x3*_x4*_x9
    _x27 = 2*_x10*_x7*_x9
    _x28 = 2.0*_x8*_x3*_x4*v1*v2*v3
    _x29 = -4*_x10*_x7*v1*v2*v3
    dRdv1_s[  0,  0] = _x16+_x15+_x13+_x12-2*_x10*_x7*_x9+1.0*_x8*_x3*_x4*_x9+2*_x6*_x7*v1+_x5
    dRdv1_s[  0,  1] = 1.0*_x6*_x7*v1*v3+2*_x8*_x3*_x4*v1*v3-1.0*_x6*_x21*v1*v3+_x20+_x19+_x17
    dRdv1_s[  0,  2] = _x24+_x23+_x22-1.0*_x6*_x7*v1*v2-2*_x8*_x3*_x4*v1*v2+1.0*_x6*_x21*v1*v2
    dRdv1_s[  1,  0] = -1.0*_x6*_x7*v1*v3-2*_x8*_x3*_x4*v1*v3+1.0*_x6*_x21*v1*v3+_x20+_x19+_x17
    dRdv1_s[  1,  1] = _x16+_x15-2*_x10*_x7*v1*_x11+1.0*_x8*_x3*_x4*v1*_x11+_x27+_x26+_x25+_x5
    dRdv1_s[  1,  2] = _x29+_x28+1.0*_x6*_x7*_x18+2*_x8*_x3*_x4*_x18-1.0*_x6*_x21*_x18-2*_x1*_x3*_x4
    dRdv1_s[  2,  0] = _x24+_x23+_x22+1.0*_x6*_x7*v1*v2+2*_x8*_x3*_x4*v1*v2-1.0*_x6*_x21*v1*v2
    dRdv1_s[  2,  1] = _x29+_x28-1.0*_x6*_x7*_x18-2*_x8*_x3*_x4*_x18+1.0*_x6*_x21*_x18+2*_x1*_x3*_x4
    dRdv1_s[  2,  2] = -2*_x10*_x7*v1*_x14+1.0*_x8*_x3*_x4*v1*_x14+_x13+_x12+_x27+_x26+_x25+_x5
    ################################################
    #      Variable: dRdv2_s
    ################################################
    _x1 = pow(th,-1)
    _x2 = 0.5*th
    _x3 = cos(_x2)
    _x4 = sin(_x2)
    _x5 = -1.0*_x1*_x3*_x4*v2
    _x6 = pow(th,-2)
    _x7 = pow(_x4,2)
    _x8 = -2*_x6*_x7*v2
    _x9 = pow(th,-3)
    _x10 = pow(v1,2)
    _x11 = pow(th,-4)
    _x12 = pow(v2,3)
    _x13 = -1.0*_x9*_x3*_x4*_x12
    _x14 = 2*_x11*_x7*_x12
    _x15 = pow(v3,2)
    _x16 = -1.0*_x9*_x3*_x4*v2*_x15
    _x17 = 2*_x11*_x7*v2*_x15
    _x18 = 2*_x6*_x7*v1
    _x19 = pow(v2,2)
    _x20 = 2.0*_x9*_x3*_x4*v1*_x19
    _x21 = -4*_x11*_x7*v1*_x19
    _x22 = pow(_x3,2)
    _x23 = 2.0*_x9*_x3*_x4*v1*v2*v3
    _x24 = -4*_x11*_x7*v1*v2*v3
    _x25 = -1.0*_x9*_x3*_x4*_x10*v2
    _x26 = 2*_x11*_x7*_x10*v2
    _x27 = 2*_x6*_x7*v3
    _x28 = 2.0*_x9*_x3*_x4*_x19*v3
    _x29 = -4*_x11*_x7*_x19*v3
    dRdv2_s[  0,  0] = _x17+_x16+_x14+_x13-2*_x11*_x7*_x10*v2+1.0*_x9*_x3*_x4*_x10*v2+_x8+_x5
    dRdv2_s[  0,  1] = 1.0*_x6*_x7*v2*v3+2*_x9*_x3*_x4*v2*v3-1.0*_x6*_x22*v2*v3+_x21+_x20+_x18
    dRdv2_s[  0,  2] = _x24+_x23-1.0*_x6*_x7*_x19-2*_x9*_x3*_x4*_x19+1.0*_x6*_x22*_x19+2*_x1*_x3*_x4
    dRdv2_s[  1,  0] = -1.0*_x6*_x7*v2*v3-2*_x9*_x3*_x4*v2*v3+1.0*_x6*_x22*v2*v3+_x21+_x20+_x18
    dRdv2_s[  1,  1] = _x17+_x16-2*_x11*_x7*_x12+1.0*_x9*_x3*_x4*_x12+_x26+_x25+2*_x6*_x7*v2+_x5
    dRdv2_s[  1,  2] = _x29+_x28+_x27+1.0*_x6*_x7*v1*v2+2*_x9*_x3*_x4*v1*v2-1.0*_x6*_x22*v1*v2
    dRdv2_s[  2,  0] = _x24+_x23+1.0*_x6*_x7*_x19+2*_x9*_x3*_x4*_x19-1.0*_x6*_x22*_x19-2*_x1*_x3*_x4
    dRdv2_s[  2,  1] = _x29+_x28+_x27-1.0*_x6*_x7*v1*v2-2*_x9*_x3*_x4*v1*v2+1.0*_x6*_x22*v1*v2
    dRdv2_s[  2,  2] = -2*_x11*_x7*v2*_x15+1.0*_x9*_x3*_x4*v2*_x15+_x14+_x13+_x26+_x25+_x8+_x5
    ################################################
    #      Variable: dRdv3_s
    ################################################
    _x1 = pow(th,-1)
    _x2 = 0.5*th
    _x3 = cos(_x2)
    _x4 = sin(_x2)
    _x5 = -1.0*_x1*_x3*_x4*v3
    _x6 = pow(th,-2)
    _x7 = pow(_x4,2)
    _x8 = -2*_x6*_x7*v3
    _x9 = pow(th,-3)
    _x10 = pow(v1,2)
    _x11 = pow(th,-4)
    _x12 = pow(v2,2)
    _x13 = -1.0*_x9*_x3*_x4*_x12*v3
    _x14 = 2*_x11*_x7*_x12*v3
    _x15 = pow(v3,3)
    _x16 = -1.0*_x9*_x3*_x4*_x15
    _x17 = 2*_x11*_x7*_x15
    _x18 = 2.0*_x9*_x3*_x4*v1*v2*v3
    _x19 = -4*_x11*_x7*v1*v2*v3
    _x20 = pow(_x3,2)
    _x21 = pow(v3,2)
    _x22 = 2*_x6*_x7*v1
    _x23 = 2.0*_x9*_x3*_x4*v1*_x21
    _x24 = -4*_x11*_x7*v1*_x21
    _x25 = -1.0*_x9*_x3*_x4*_x10*v3
    _x26 = 2*_x11*_x7*_x10*v3
    _x27 = 2*_x6*_x7*v2
    _x28 = 2.0*_x9*_x3*_x4*v2*_x21
    _x29 = -4*_x11*_x7*v2*_x21
    dRdv3_s[  0,  0] = _x17+_x16+_x14+_x13-2*_x11*_x7*_x10*v3+1.0*_x9*_x3*_x4*_x10*v3+_x8+_x5
    dRdv3_s[  0,  1] = 1.0*_x6*_x7*_x21+2*_x9*_x3*_x4*_x21-1.0*_x6*_x20*_x21+_x19+_x18-2*_x1*_x3*_x4
    dRdv3_s[  0,  2] = _x24+_x23-1.0*_x6*_x7*v2*v3-2*_x9*_x3*_x4*v2*v3+1.0*_x6*_x20*v2*v3+_x22
    dRdv3_s[  1,  0] = -1.0*_x6*_x7*_x21-2*_x9*_x3*_x4*_x21+1.0*_x6*_x20*_x21+_x19+_x18+2*_x1*_x3*_x4
    dRdv3_s[  1,  1] = _x17+_x16-2*_x11*_x7*_x12*v3+1.0*_x9*_x3*_x4*_x12*v3+_x26+_x25+_x8+_x5
    dRdv3_s[  1,  2] = _x29+_x28+1.0*_x6*_x7*v1*v3+2*_x9*_x3*_x4*v1*v3-1.0*_x6*_x20*v1*v3+_x27
    dRdv3_s[  2,  0] = _x24+_x23+1.0*_x6*_x7*v2*v3+2*_x9*_x3*_x4*v2*v3-1.0*_x6*_x20*v2*v3+_x22
    dRdv3_s[  2,  1] = _x29+_x28-1.0*_x6*_x7*v1*v3-2*_x9*_x3*_x4*v1*v3+1.0*_x6*_x20*v1*v3+_x27
    dRdv3_s[  2,  2] = -2*_x11*_x7*_x15+1.0*_x9*_x3*_x4*_x15+_x14+_x13+_x26+_x25+2*_x6*_x7*v3+_x5
    return dRdv1_s, dRdv2_s, dRdv3_s

def dRdv0(v1, v2, v3):
    th = sqrt(v1**2 + v2**2 + v3**2)
    dRdv1_s0 = array(zeros((3,3)))
    dRdv2_s0 = array(zeros((3,3)))
    dRdv3_s0 = array(zeros((3,3)))
    ################################################
    #      Variable: dRdv1_s0
    ################################################
    _x1 = pow(v1,3)
    _x2 = pow(v2,2)
    _x3 = -_x2
    _x4 = pow(v3,2)
    _x5 = -_x4
    _x6 = pow(th,2)
    _x7 = -15*v2
    _x8 = pow(v1,2)
    _x9 = 2*_x8*v2
    _x10 = -6*v2
    _x11 = _x8*v2
    _x12 = -6*v3
    _x13 = _x8*v3
    _x14 = -15*v3
    _x15 = 2*_x8*v3
    _x16 = 4*_x8
    _x17 = -v1*v2*v3
    _x18 = 6*_x8
    _x19 = v1*v2*v3
    dRdv1_s0[  0,  0] = _x6*(v1*(_x5+_x3+15)+_x1)/360-(v1*(_x5+_x3)+_x1)/24
    dRdv1_s0[  0,  1] = _x6*(-12*v1*v3+_x9+_x7)/360-(-4*v1*v3+_x11+_x10)/12
    dRdv1_s0[  0,  2] = _x6*(_x15+_x14+12*v1*v2)/360-(_x13+_x12+4*v1*v2)/12
    dRdv1_s0[  1,  0] = _x6*(12*v1*v3+_x9+_x7)/360-(4*v1*v3+_x11+_x10)/12
    dRdv1_s0[  1,  1] = (v1*(_x4+_x3-24)+_x1)/24-_x6*(v1*(_x4+_x3-45)+_x1)/360
    dRdv1_s0[  1,  2] = (_x17+_x16-12)/12-_x6*(_x17+_x18-30)/180
    dRdv1_s0[  2,  0] = _x6*(_x15+_x14-12*v1*v2)/360-(_x13+_x12-4*v1*v2)/12
    dRdv1_s0[  2,  1] = _x6*(_x19+_x18-30)/180-(_x19+_x16-12)/12
    dRdv1_s0[  2,  2] = (v1*(_x5+_x2-24)+_x1)/24-_x6*(v1*(_x5+_x2-45)+_x1)/360
    ################################################
    #      Variable: dRdv2_s0
    ################################################
    _x1 = pow(th,2)
    _x2 = pow(v2,3)
    _x3 = pow(v1,2)
    _x4 = -_x3
    _x5 = pow(v3,2)
    _x6 = -15*v1
    _x7 = pow(v2,2)
    _x8 = 2*v1*_x7
    _x9 = -6*v1
    _x10 = v1*_x7
    _x11 = 4*_x7
    _x12 = v1*v2*v3
    _x13 = 6*_x7
    _x14 = -_x5
    _x15 = -6*v3
    _x16 = _x7*v3
    _x17 = -15*v3
    _x18 = 2*_x7*v3
    _x19 = -v1*v2*v3
    dRdv2_s0[  0,  0] = (v2*(_x5+_x4-24)+_x2)/24-_x1*(v2*(_x5+_x4-45)+_x2)/360
    dRdv2_s0[  0,  1] = _x1*(-12*v2*v3+_x8+_x6)/360-(-4*v2*v3+_x10+_x9)/12
    dRdv2_s0[  0,  2] = _x1*(_x12+_x13-30)/180-(_x12+_x11-12)/12
    dRdv2_s0[  1,  0] = _x1*(12*v2*v3+_x8+_x6)/360-(4*v2*v3+_x10+_x9)/12
    dRdv2_s0[  1,  1] = _x1*(v2*(_x14+_x4+15)+_x2)/360-(v2*(_x14+_x4)+_x2)/24
    dRdv2_s0[  1,  2] = _x1*(_x18+_x17-12*v1*v2)/360-(_x16+_x15-4*v1*v2)/12
    dRdv2_s0[  2,  0] = (_x19+_x11-12)/12-_x1*(_x19+_x13-30)/180
    dRdv2_s0[  2,  1] = _x1*(_x18+_x17+12*v1*v2)/360-(_x16+_x15+4*v1*v2)/12
    dRdv2_s0[  2,  2] = (v2*(_x14+_x3-24)+_x2)/24-_x1*(v2*(_x14+_x3-45)+_x2)/360
    ################################################
    #      Variable: dRdv3_s0
    ################################################
    _x1 = pow(th,2)
    _x2 = pow(v1,2)
    _x3 = -_x2
    _x4 = pow(v2,2)
    _x5 = pow(v3,3)
    _x6 = -v1*v2*v3
    _x7 = pow(v3,2)
    _x8 = 4*_x7
    _x9 = 6*_x7
    _x10 = -6*v1
    _x11 = v1*_x7
    _x12 = -15*v1
    _x13 = 2*v1*_x7
    _x14 = v1*v2*v3
    _x15 = -_x4
    _x16 = -6*v2
    _x17 = v2*_x7
    _x18 = -15*v2
    _x19 = 2*v2*_x7
    dRdv3_s0[  0,  0] = (_x5+(_x4+_x3-24)*v3)/24-_x1*(_x5+(_x4+_x3-45)*v3)/360
    dRdv3_s0[  0,  1] = (_x8+_x6-12)/12-_x1*(_x9+_x6-30)/180
    dRdv3_s0[  0,  2] = _x1*(_x13+12*v2*v3+_x12)/360-(_x11+4*v2*v3+_x10)/12
    dRdv3_s0[  1,  0] = _x1*(_x9+_x14-30)/180-(_x8+_x14-12)/12
    dRdv3_s0[  1,  1] = (_x5+(_x15+_x2-24)*v3)/24-_x1*(_x5+(_x15+_x2-45)*v3)/360
    dRdv3_s0[  1,  2] = _x1*(_x19-12*v1*v3+_x18)/360-(_x17-4*v1*v3+_x16)/12
    dRdv3_s0[  2,  0] = _x1*(_x13-12*v2*v3+_x12)/360-(_x11-4*v2*v3+_x10)/12
    dRdv3_s0[  2,  1] = _x1*(_x19+12*v1*v3+_x18)/360-(_x17+4*v1*v3+_x16)/12
    dRdv3_s0[  2,  2] = _x1*(_x5+(_x15+_x3+15)*v3)/360-(_x5+(_x15+_x3)*v3)/24
    return dRdv1_s0, dRdv2_s0, dRdv3_s0

def dfxdX(v1, v2, v3):
    th = sqrt(v1**2 + v2**2 + v3**2)
    dfxdX = array(zeros(6))
    ################################################
    #      Variable: dfxdX
    ################################################
    _x1 = pow(th,-2)
    _x2 = 0.5*th
    _x3 = cos(_x2)
    _x4 = pow(_x3,2)
    _x5 = pow(th,-3)
    _x6 = sin(_x2)
    _x7 = pow(_x6,2)
    _x8 = 2*_x1*_x7*v3
    _x9 = pow(v1,2)
    _x10 = pow(th,-4)
    _x11 = pow(th,-1)
    _x12 = 2.0*_x5*_x3*_x6*v1*v2*v3
    _x13 = -4*_x10*_x7*v1*v2*v3
    _x14 = pow(v1,3)
    _x15 = pow(v2,2)
    _x16 = pow(v3,2)
    _x17 = pow(v2,3)
    _x18 = pow(v3,3)
    dfxdX[  2] = 1
    dfxdX[  3] = pc3*(-2*_x10*_x7*v1*_x16+1.0*_x5*_x3*_x6*v1*_x16+2*_x10*_x7*v1*_x15-1.0*_x5*_x3*_x6*v1*_x15+2*_x10*_x7*_x14-1.0*_x5*_x3*_x6*_x14-2*_x1*_x7*v1-1.0*_x11*_x3*_x6*v1)+pc2*(_x13+_x12-1.0*_x1*_x7*_x9-2*_x5*_x3*_x6*_x9+1.0*_x1*_x4*_x9+2*_x11*_x3*_x6)+pc1*(-4*_x10*_x7*_x9*v3+2.0*_x5*_x3*_x6*_x9*v3+_x8+1.0*_x1*_x7*v1*v2+2*_x5*_x3*_x6*v1*v2-1.0*_x1*_x4*v1*v2)
    dfxdX[  4] = pc3*(-2*_x10*_x7*v2*_x16+1.0*_x5*_x3*_x6*v2*_x16+2*_x10*_x7*_x17-1.0*_x5*_x3*_x6*_x17+2*_x10*_x7*_x9*v2-1.0*_x5*_x3*_x6*_x9*v2-2*_x1*_x7*v2-1.0*_x11*_x3*_x6*v2)+pc2*(-4*_x10*_x7*_x15*v3+2.0*_x5*_x3*_x6*_x15*v3+_x8-1.0*_x1*_x7*v1*v2-2*_x5*_x3*_x6*v1*v2+1.0*_x1*_x4*v1*v2)+pc1*(_x13+_x12+1.0*_x1*_x7*_x15+2*_x5*_x3*_x6*_x15-1.0*_x1*_x4*_x15-2*_x11*_x3*_x6)
    dfxdX[  5] = pc3*(-2*_x10*_x7*_x18+1.0*_x5*_x3*_x6*_x18+2*_x10*_x7*_x15*v3-1.0*_x5*_x3*_x6*_x15*v3+2*_x10*_x7*_x9*v3-1.0*_x5*_x3*_x6*_x9*v3+_x8-1.0*_x11*_x3*_x6*v3)+pc2*(-4*_x10*_x7*v2*_x16+2.0*_x5*_x3*_x6*v2*_x16-1.0*_x1*_x7*v1*v3-2*_x5*_x3*_x6*v1*v3+1.0*_x1*_x4*v1*v3+2*_x1*_x7*v2)+pc1*(-4*_x10*_x7*v1*_x16+2.0*_x5*_x3*_x6*v1*_x16+1.0*_x1*_x7*v2*v3+2*_x5*_x3*_x6*v2*v3-1.0*_x1*_x4*v2*v3+2*_x1*_x7*v1)
    return dfxdX

def dfxdX0(v1, v2, v3):
    th = sqrt(v1**2 + v2**2 + v3**2)
    dfxdX0 = array(zeros(6))
    ################################################
    #      Variable: dfxdX0
    ################################################
    _x1 = pow(th,2)
    _x2 = pow(v1,2)
    _x3 = -pc3*pow(v1,3)
    _x4 = pow(v2,2)
    _x5 = -pc3*v1*_x4
    _x6 = 2*pc1*_x2
    _x7 = 2*pc2*v1*v2
    _x8 = pow(v3,2)
    _x9 = pc3*v1*_x8
    _x10 = 12*pc2*v1
    _x11 = -pc3*_x2
    _x12 = -pc3*pow(v2,3)
    _x13 = 2*pc1*v1*v2
    _x14 = 2*pc2*_x4
    _x15 = pc3*v2*_x8
    _x16 = 8*pc2*v1
    _x17 = -pc3*_x4
    _x18 = (2*pc2*v2+2*pc1*v1)*_x8
    _x19 = pc3*pow(v3,3)
    dfxdX0[  2] = 1
    dfxdX0[  3] = _x1*(_x9+(_x7+_x6-15*pc1)*v3+_x5-12*pc1*v1*v2+_x3+12*pc2*_x2+45*pc3*v1-60*pc2)/360-(_x9+(_x7+_x6-12*pc1)*v3+_x5-8*pc1*v1*v2+_x3+8*pc2*_x2+24*pc3*v1-24*pc2)/24
    dfxdX0[  4] = _x1*(_x15+(_x14+_x13-15*pc2)*v3+_x12-12*pc1*_x4+(_x11+_x10+45*pc3)*v2+60*pc1)/360-(_x15+(_x14+_x13-12*pc2)*v3+_x12-8*pc1*_x4+(_x11+_x16+24*pc3)*v2+24*pc1)/24
    dfxdX0[  5] = _x1*(_x19+_x18+(_x17-12*pc1*v2+_x11+_x10+15*pc3)*v3-15*pc2*v2-15*pc1*v1)/360-(_x19+_x18+(_x17-8*pc1*v2+_x11+_x16)*v3-12*pc2*v2-12*pc1*v1)/24
    return dfxdX0

def RotationMatrixFromV(v1, v2, v3):
    rotMat = array(zeros((3,3)))
    ################################################
    #      Variable: rotMat
    ################################################
    _x1 = pow(v1,2)
    _x2 = pow(v2,2)
    _x3 = pow(v3,2)
    _x4 = _x3+_x2+_x1
    _x5 = pow(_x4,1./2)
    _x6 = 0.5*_x5
    _x7 = cos(_x6)
    _x8 = pow(_x7,2)
    _x9 = pow(_x4,-1)
    _x10 = sin(_x6)
    _x11 = pow(_x10,2)
    _x12 = -_x2*_x9*_x11
    _x13 = -_x3*_x9*_x11
    _x14 = pow(_x5,-1)
    _x15 = 2*v1*v2*_x9*_x11
    _x16 = 2*v1*v3*_x9*_x11
    _x17 = -_x1*_x9*_x11
    _x18 = 2*v2*v3*_x9*_x11
    rotMat[  0,  0] = _x13+_x12+_x1*_x9*_x11+_x8
    rotMat[  0,  1] = _x15-2*v3*_x14*_x7*_x10
    rotMat[  0,  2] = _x16+2*v2*_x14*_x7*_x10
    rotMat[  1,  0] = _x15+2*v3*_x14*_x7*_x10
    rotMat[  1,  1] = _x13+_x2*_x9*_x11+_x17+_x8
    rotMat[  1,  2] = _x18-2*v1*_x14*_x7*_x10
    rotMat[  2,  0] = _x16-2*v2*_x14*_x7*_x10
    rotMat[  2,  1] = _x18+2*v1*_x14*_x7*_x10
    rotMat[  2,  2] = _x3*_x9*_x11+_x12+_x17+_x8
    return rotMat

def RotationMatrixFromV0(v1, v2, v3):
    th = sqrt(v1**2 + v2**2 + v3**2)
    rotMat0 = array(zeros((3,3)))
    ################################################
    #      Variable: rotMat0
    ################################################
    _x1 = pow(v1,2)
    _x2 = pow(v2,2)
    _x3 = -_x2
    _x4 = pow(v3,2)
    _x5 = -_x4
    _x6 = pow(th,2)
    _x7 = v1*v2
    _x8 = v1*v3
    _x9 = 2*v1
    _x10 = -v2*v3
    _x11 = 4*v1
    _x12 = v2*v3
    rotMat0[  0,  0] = (_x5+_x3+_x1+4)/4-_x6*(_x5+_x3+_x1+12)/48
    rotMat0[  0,  1] = (_x7-2*v3)/2-_x6*(_x7-4*v3)/24
    rotMat0[  0,  2] = (_x8+2*v2)/2-_x6*(_x8+4*v2)/24
    rotMat0[  1,  0] = (2*v3+_x7)/2-_x6*(4*v3+_x7)/24
    rotMat0[  1,  1] = _x6*(_x4+_x3+_x1-12)/48-(_x4+_x3+_x1-4)/4
    rotMat0[  1,  2] = _x6*(_x10+_x11)/24-(_x10+_x9)/2
    rotMat0[  2,  0] = (_x8-2*v2)/2-_x6*(_x8-4*v2)/24
    rotMat0[  2,  1] = (_x12+_x9)/2-_x6*(_x12+_x11)/24
    rotMat0[  2,  2] = _x6*(_x5+_x2+_x1-12)/48-(_x5+_x2+_x1-4)/4
    return rotMat0

def VdotFromOmega(omega):
    omega1, omega2, omega3 = omega
    vd = array(zeros(3))
    ################################################
    #      Variable: vd
    ################################################
    _x1 = cot(0.5*th)
    _x2 = pow(th,-1)
    _x3 = _x1-2*_x2
    _x4 = omega3*v3+omega2*v2+omega1*v1
    vd[  0] = 0.5*(-_x2*_x3*v1*_x4+omega2*v3-omega3*v2+omega1*th*_x1)
    vd[  1] = 0.5*(-_x2*_x3*v2*_x4-omega1*v3+omega3*v1+omega2*th*_x1)
    vd[  2] = 0.5*(-_x2*_x3*v3*_x4+omega1*v2-omega2*v1+omega3*th*_x1)
    return vd

def VdotFromOmega0(omega):
    omega1, omega2, omega3 = omega
    vd0 = array(zeros(3))
    ################################################
    #      Variable: vd0
    ################################################
    _x1 = pow(th,2)
    _x2 = pow(v1,2)
    _x3 = omega2*v1*v2
    _x4 = v1*v3
    _x5 = omega2*pow(v2,2)
    _x6 = omega2*v2*v3
    _x7 = pow(v3,2)
    vd0[  0] = (omega3*(_x4-6*v2)+6*omega2*v3+_x3+omega1*(_x2+12))/12+_x1*(omega3*v1*v3+_x3+omega1*(_x2-60))/720
    vd0[  1] = (omega3*(v2*v3+6*v1)+omega1*(v1*v2-6*v3)+_x5+12*omega2)/12+_x1*(omega3*v2*v3+_x5+omega1*v1*v2-60*omega2)/720
    vd0[  2] = (omega3*(_x7+12)+omega1*(_x4+6*v2)+_x6-6*omega2*v1)/12+_x1*(omega3*(_x7-60)+_x6+omega1*v1*v3)/720
    return vd0
