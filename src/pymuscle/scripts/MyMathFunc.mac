/* 
 * MyMathFunc.mac: Math functions just for convenience
 * 2010 Geoyeob Kim
 * 
 */

/* 
 * Quaternion multiplication
 * q must have the form of [w, x, y, z]
 * 
 */
quat_mult(q1, q2) := 
  block( [a1: q1[1], b1: q1[2], c1: q1[3], d1:q1[4],
          a2: q2[1], b2: q2[2], c2: q2[3], d2:q2[4] ],
         [ a1*a2 - b1*b2 - c1*c2 - d1*d2,
           a1*b2 + b1*a2 + c1*d2 - d1*c2,
           a1*c2 - b1*d2 + c1*a2 + d1*b2,
           a1*d2 + b1*c2 - c1*b2 + d1*a2 ] )$

/*
 * Cross product of 3D vectors
 * 
 */
cross(a,b) := [ a[2]*b[3]-a[3]*b[2], a[3]*b[1]-a[1]*b[3], a[1]*b[2]-a[2]*b[1] ]$

/*
 * Rotation matrix from rotation quaternion
 *
 */
RotationMatrixFromQuaternion(a,b,c,d) :=
	/* 'a' is a scalar part */
	matrix( [a^2+b^2-c^2-d^2,  2*b*c-2*a*d,      2*b*d+2*a*c    ],
	        [2*b*c+2*a*d,      a^2-b^2+c^2-d^2,  2*c*d-2*a*b    ],
	        [2*b*d-2*a*c,      2*c*d+2*a*b,      a^2-b^2-c^2+d^2] )$

          
RotationMatrixFromEulerAngles_XZX(a1, a2, a3) :=
  block( [c1 : cos(a1), c2 : cos(a2), c3 : cos(a3),
          s1 : sin(a1), s2 : sin(a2), s3 : sin(a3) ],
         matrix( [ c2,    -c3*s2,             s3*s2            ],
                 [ c1*s2,  c1*c2*c3 - s1*s3, -c2*c1*s3 - c3*s1 ],
                 [ s2*s1,  c1*s3+c3*c2*s1,    c1*c3-c2*s1*s3   ] ) )$
