/* PrintClike.mac
 * 2010 Geoyeob Kim
 */



OpenFile(st) := block(
	out : openw(st),
	printf(out, "# Autogenerated file~%"),
	printf(out, "# 2010 Geoyeob Kim~%"),
	printf(out, "# As a part of the thesis implementation~%"),
	0
)$
OpenFileC(st) := block(
	out : openw(st),
	printf(out, "/*~%"),
	printf(out, " * Autogenerated file~%"),
	printf(out, " * 2010 Geoyeob Kim~%"),
	printf(out, " * As a part of the thesis implementation~%"),
	printf(out, " */~%"),
	0
)$

printClike(v,vName, matDim, lineEnder) := block(
	if matrixp(v) then block (
		/*matDim : printMatDim(v),*/
		for r:1 thru matDim[1] do (
			pred : symbolp(v[r]),
			if pred then (
				for c:1 thru matDim[2] do (
					printf(out, "    ~a[~3d,~3d] = ~a[~d]~a~%", vName, r-1, c-1, string(v[r]), c-1, lineEnder)
				)
			)
			else (
				for c:1 thru matDim[2] do (
					vrcClike: subst(pow, "^", v[r][c]),
					vrcStr: string(vrcClike),
					if notequal(vrcStr, "0") then printf(out, "    ~a[~3d,~3d] = ~a~a~%", vName, r-1, c-1, vrcStr, lineEnder)
				)
			)
		),
		0
	)
	elseif listp(v) then block ( 
		vLen:length(v),
		for i:1 thru vLen do (
			viClike: subst(pow,"^", v[i]),
			viStr: string(viClike),
			if notequal(viStr, "0") then printf(out, "    ~a[~3d] = ~a~a~%", vName, i-1, viStr, lineEnder)
		),
		"this is list."
	)
	else (
		/* Hope this is a scalar... */
		vClike : subst(pow,"^",v),
		printf(out, "    ~a = ~a~a~%", vName, string(vClike), lineEnder)
	)
)$

printMatDim(m) := if matrixp(m) then [length(m),length(m[1])]$

/*
optimprefix:_x;
v1:[x+y/z, y^5, y/z];
v2:[x+y, -y/z, x+y+y/z];

opted : optimize(append(v1, v2))$

ev(opted, [x=1,y=2,z=3]);
*/

writeVarHeader_Python(out, vName) := block (
	printf(out, "    ################################################~%"),
	printf(out, "    #      Variable: ~a~%", vName),
	printf(out, "    ################################################~%"),
	0
)$
writeVarHeader_C(out, vName) := block (
	printf(out, "    /***********************************************~%"),
	printf(out, "     *     Variable: ~a~%", vName),
	printf(out, "     ***********************************************/~%"),
	0
)$

WriteBlockToClike(vName, blk, matDim) := block(
	writeVarHeader_Python(out, vName),
	intermNo : length(first(blk)),
	/* Intermediate variables printing */
	for i:1 thru length(blk)-2 do (
		  expression : first(rest(blk,i)),
		  clike : subst(pow,"^", second(expression)   ),
		  printf(out, "    ~a = ~a~%", first(expression), string(clike))
	),
	printClike(last(blk), vName, matDim, "")
)$
WriteBlockToClikC(vName, blk, matDim) := block(
	writeVarHeader_C(out, vName),
	intermNo : length(first(blk)),
	/* Intermediate variables printing */
	for i:1 thru length(blk)-2 do (
		  expression : first(rest(blk,i)),
		  clike : subst(pow,"^", second(expression)   ),
		  printf(out, "    ~a = ~a;~%", first(expression), string(clike)) /* NOTE THE SEMICOLON BEFORE NEWLINE */
	),
	printClike(last(blk), vName, matDim, ";")
)$

WriteDirectToFile(st) := block(
	printf(out, st),
	0
)$

WriteBlockTest(blk) := block(
   itermNo : length(first(blk)),
   for i:1 thru length(blk)-2 do (
        expression : first(rest(blk,i)),
        printf(out, "    ~a = ~a~%", first(expression), string(second(expression)))
   ),
   matrixp(last(blk)),
   [ last(blk)[1], length(last(blk)[1]) ]
   /*printMatDim(last(blk))*/
)$


/* Test Cases */
/*
WriteBlockToClike("opted", opted)$

opted2 : optimize(transpose(matrix(v1)) . matrix(v2));
WriteBlockToClike("opted2", opted2)$

*/

